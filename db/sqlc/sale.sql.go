// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.20.0
// source: sale.sql

package db

import (
	"context"
	"time"

	"github.com/lib/pq"
)

const countSales = `-- name: CountSales :one
SELECT COUNT(*) FROM sale
`

func (q *Queries) CountSales(ctx context.Context) (int64, error) {
	row := q.db.QueryRowContext(ctx, countSales)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const createSale = `-- name: CreateSale :one
INSERT INTO sale (
    client_id,
    client_name,
    product,
    price,
    observation
) VALUES (
    $1, $2, $3, $4, $5
) RETURNING id, client_id, client_name, product, price, observation, created_at, changed_at, pdf_generated_at
`

type CreateSaleParams struct {
	ClientID    int64   `json:"client_id"`
	ClientName  string  `json:"client_name"`
	Product     string  `json:"product"`
	Price       float64 `json:"price"`
	Observation string  `json:"observation"`
}

func (q *Queries) CreateSale(ctx context.Context, arg CreateSaleParams) (Sale, error) {
	row := q.db.QueryRowContext(ctx, createSale,
		arg.ClientID,
		arg.ClientName,
		arg.Product,
		arg.Price,
		arg.Observation,
	)
	var i Sale
	err := row.Scan(
		&i.ID,
		&i.ClientID,
		&i.ClientName,
		&i.Product,
		&i.Price,
		&i.Observation,
		&i.CreatedAt,
		&i.ChangedAt,
		&i.PdfGeneratedAt,
	)
	return i, err
}

const deleteSale = `-- name: DeleteSale :exec
DELETE FROM sale
WHERE id = $1
`

func (q *Queries) DeleteSale(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteSale, id)
	return err
}

const deleteSales = `-- name: DeleteSales :exec
DELETE FROM sale
WHERE id = ANY($1::int[])
`

func (q *Queries) DeleteSales(ctx context.Context, dollar_1 []int32) error {
	_, err := q.db.ExecContext(ctx, deleteSales, pq.Array(dollar_1))
	return err
}

const getAllSaleIDs = `-- name: GetAllSaleIDs :many
SELECT id FROM sale
ORDER BY id
`

func (q *Queries) GetAllSaleIDs(ctx context.Context) ([]int64, error) {
	rows, err := q.db.QueryContext(ctx, getAllSaleIDs)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []int64{}
	for rows.Next() {
		var id int64
		if err := rows.Scan(&id); err != nil {
			return nil, err
		}
		items = append(items, id)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getSale = `-- name: GetSale :one
SELECT id, client_id, client_name, product, price, observation, created_at, changed_at, pdf_generated_at FROM sale
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetSale(ctx context.Context, id int64) (Sale, error) {
	row := q.db.QueryRowContext(ctx, getSale, id)
	var i Sale
	err := row.Scan(
		&i.ID,
		&i.ClientID,
		&i.ClientName,
		&i.Product,
		&i.Price,
		&i.Observation,
		&i.CreatedAt,
		&i.ChangedAt,
		&i.PdfGeneratedAt,
	)
	return i, err
}

const getSalesByDate = `-- name: GetSalesByDate :many
SELECT id FROM sale
WHERE created_at BETWEEN $1 AND $2
ORDER BY id
`

type GetSalesByDateParams struct {
	CreatedAt   time.Time `json:"created_at"`
	CreatedAt_2 time.Time `json:"created_at_2"`
}

func (q *Queries) GetSalesByDate(ctx context.Context, arg GetSalesByDateParams) ([]int64, error) {
	rows, err := q.db.QueryContext(ctx, getSalesByDate, arg.CreatedAt, arg.CreatedAt_2)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []int64{}
	for rows.Next() {
		var id int64
		if err := rows.Scan(&id); err != nil {
			return nil, err
		}
		items = append(items, id)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listSales = `-- name: ListSales :many
SELECT id, client_id, client_name, product, price, observation, created_at, changed_at, pdf_generated_at FROM sale
ORDER BY id DESC
LIMIT $1
OFFSET $2
`

type ListSalesParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListSales(ctx context.Context, arg ListSalesParams) ([]Sale, error) {
	rows, err := q.db.QueryContext(ctx, listSales, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Sale{}
	for rows.Next() {
		var i Sale
		if err := rows.Scan(
			&i.ID,
			&i.ClientID,
			&i.ClientName,
			&i.Product,
			&i.Price,
			&i.Observation,
			&i.CreatedAt,
			&i.ChangedAt,
			&i.PdfGeneratedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateSale = `-- name: UpdateSale :one
UPDATE sale 
SET 
    client_id = COALESCE($2, client_id),
    client_name = COALESCE($3, client_name),
    product = COALESCE($4, product),
    price = COALESCE($5, price),
    observation = COALESCE($6, observation)
WHERE id = $1
RETURNING id, client_id, client_name, product, price, observation, created_at, changed_at, pdf_generated_at
`

type UpdateSaleParams struct {
	ID          int64   `json:"id"`
	ClientID    int64   `json:"client_id"`
	ClientName  string  `json:"client_name"`
	Product     string  `json:"product"`
	Price       float64 `json:"price"`
	Observation string  `json:"observation"`
}

func (q *Queries) UpdateSale(ctx context.Context, arg UpdateSaleParams) (Sale, error) {
	row := q.db.QueryRowContext(ctx, updateSale,
		arg.ID,
		arg.ClientID,
		arg.ClientName,
		arg.Product,
		arg.Price,
		arg.Observation,
	)
	var i Sale
	err := row.Scan(
		&i.ID,
		&i.ClientID,
		&i.ClientName,
		&i.Product,
		&i.Price,
		&i.Observation,
		&i.CreatedAt,
		&i.ChangedAt,
		&i.PdfGeneratedAt,
	)
	return i, err
}

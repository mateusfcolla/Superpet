// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.20.0
// source: category.sql

package db

import (
	"context"

	"github.com/lib/pq"
)

const associateProductWithCategory = `-- name: AssociateProductWithCategory :one
INSERT INTO product_categories (product_id, category_id)
VALUES ($1, $2)
RETURNING product_id, category_id
`

type AssociateProductWithCategoryParams struct {
	ProductID  int64 `json:"product_id"`
	CategoryID int64 `json:"category_id"`
}

func (q *Queries) AssociateProductWithCategory(ctx context.Context, arg AssociateProductWithCategoryParams) (ProductCategory, error) {
	row := q.db.QueryRowContext(ctx, associateProductWithCategory, arg.ProductID, arg.CategoryID)
	var i ProductCategory
	err := row.Scan(&i.ProductID, &i.CategoryID)
	return i, err
}

const countCategory = `-- name: CountCategory :one
SELECT COUNT(*) FROM categories
`

func (q *Queries) CountCategory(ctx context.Context) (int64, error) {
	row := q.db.QueryRowContext(ctx, countCategory)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const createCategory = `-- name: CreateCategory :one
INSERT INTO categories (
    name,
    description
) VALUES (
    $1, $2
) RETURNING id, name, description
`

type CreateCategoryParams struct {
	Name        string `json:"name"`
	Description string `json:"description"`
}

func (q *Queries) CreateCategory(ctx context.Context, arg CreateCategoryParams) (Category, error) {
	row := q.db.QueryRowContext(ctx, createCategory, arg.Name, arg.Description)
	var i Category
	err := row.Scan(&i.ID, &i.Name, &i.Description)
	return i, err
}

const deleteCategory = `-- name: DeleteCategory :exec
DELETE FROM categories 
WHERE id = $1
`

func (q *Queries) DeleteCategory(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteCategory, id)
	return err
}

const disassociateProductFromCategory = `-- name: DisassociateProductFromCategory :one
DELETE FROM product_categories
WHERE product_id = $1 AND category_id = $2
RETURNING product_id, category_id
`

type DisassociateProductFromCategoryParams struct {
	ProductID  int64 `json:"product_id"`
	CategoryID int64 `json:"category_id"`
}

func (q *Queries) DisassociateProductFromCategory(ctx context.Context, arg DisassociateProductFromCategoryParams) (ProductCategory, error) {
	row := q.db.QueryRowContext(ctx, disassociateProductFromCategory, arg.ProductID, arg.CategoryID)
	var i ProductCategory
	err := row.Scan(&i.ProductID, &i.CategoryID)
	return i, err
}

const getCategory = `-- name: GetCategory :one
SELECT id, name, description FROM categories 
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetCategory(ctx context.Context, id int64) (Category, error) {
	row := q.db.QueryRowContext(ctx, getCategory, id)
	var i Category
	err := row.Scan(&i.ID, &i.Name, &i.Description)
	return i, err
}

const listCategories = `-- name: ListCategories :many
SELECT id, name, description FROM categories 
ORDER BY id
LIMIT $1
OFFSET $2
`

type ListCategoriesParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListCategories(ctx context.Context, arg ListCategoriesParams) ([]Category, error) {
	rows, err := q.db.QueryContext(ctx, listCategories, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Category{}
	for rows.Next() {
		var i Category
		if err := rows.Scan(&i.ID, &i.Name, &i.Description); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listCategoriesByProduct = `-- name: ListCategoriesByProduct :many
SELECT c.id, c.name, c.description
FROM categories c
JOIN product_categories pc ON c.id = pc.category_id
WHERE pc.product_id = $1
ORDER BY c.id
`

func (q *Queries) ListCategoriesByProduct(ctx context.Context, productID int64) ([]Category, error) {
	rows, err := q.db.QueryContext(ctx, listCategoriesByProduct, productID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Category{}
	for rows.Next() {
		var i Category
		if err := rows.Scan(&i.ID, &i.Name, &i.Description); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listProductsByCategory = `-- name: ListProductsByCategory :many
SELECT p.id, p.name, p.description, p.user_id, p.username, p.price, p.old_price, p.sku, p.images, p.categories, p.url, p.created_at, p.changed_at
FROM products p
JOIN product_categories pc ON p.id = pc.product_id
WHERE pc.category_id = $1
ORDER BY p.id
`

func (q *Queries) ListProductsByCategory(ctx context.Context, categoryID int64) ([]Product, error) {
	rows, err := q.db.QueryContext(ctx, listProductsByCategory, categoryID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Product{}
	for rows.Next() {
		var i Product
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Description,
			&i.UserID,
			&i.Username,
			&i.Price,
			&i.OldPrice,
			&i.Sku,
			pq.Array(&i.Images),
			pq.Array(&i.Categories),
			&i.Url,
			&i.CreatedAt,
			&i.ChangedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateCategory = `-- name: UpdateCategory :one
UPDATE categories 
SET 
    name = COALESCE($2, name),
    description = COALESCE($3, description)
WHERE id = $1
RETURNING id, name, description
`

type UpdateCategoryParams struct {
	ID          int64  `json:"id"`
	Name        string `json:"name"`
	Description string `json:"description"`
}

func (q *Queries) UpdateCategory(ctx context.Context, arg UpdateCategoryParams) (Category, error) {
	row := q.db.QueryRowContext(ctx, updateCategory, arg.ID, arg.Name, arg.Description)
	var i Category
	err := row.Scan(&i.ID, &i.Name, &i.Description)
	return i, err
}
